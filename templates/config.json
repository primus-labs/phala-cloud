[
  {
    "id": "anyone-anon-service",
    "name": "Anyone Anon Service",
    "description": "Sets up a Anyone Anon (hidden) service and serves an nginx website from that.",
    "repo": "https://github.com/rA3ka/dstack-examples/tree/main/anyone-anon-service",
    "author": "Anyone",
    "icon": "Anyone-anon-hs.png",
    "tags": ["Anyone", "anon"]
  },
  {
    "id": "anyone-anon-relay",
    "name": "Anyone Network Relay",
    "description": "Set up a Anon relay and participate in expanding the Anyone Network by providing bandwidth to earn recognition rewards",
    "repo": "https://github.com/rA3ka/anon-relay-docker",
    "author": "Anyone",
    "icon": "Anyone-anon-hs.png",
    "tags": ["Anyone", "anon", "relay"]
  },
  {
    "id": "moof-mcp",
    "name": "MOOF MCP",
    "description": "An MCP server enables LLMs to work with the MOOF platform, deployed on Phala Cloud. It can list flows, create new flows, and deploy other MCP servers on Phala Cloud. Additionally, it supports fetching public flow templates, forking flows from templates, retrieving authenticated user flows, publishing or unpublishing flows to/from the shared flow store, and deploying MCP servers directly from GitHub with optional Phala hosting and environment variable support.",
    "repo": "https://github.com/moofdotfun/MOOF-MCP",
    "author": "MOOF",
    "icon": "moof.png",
    "envs": [
      { "key": "MOOF_API_KEY", "required": true },
      { "key": "MCP_API_KEY", "required": true },
      { "key": "BASE_URL", "required": false },
      { "key": "MCP_BASE_URL", "required": false }
    ],
    "tags": ["MCP", "A2A", "x402"]
  },
  {
    "id": "evm-mcp",
    "name": "EVM MCP",
    "description": "This guide outlines the steps to set up and use a webshell with the ttyd service.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/evm-mcp-server",
    "author": "MCP-DAO",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "EVM_PRIVATE_KEY", "required": true },
      { "key": "RPC_URL", "required": true },
      { "key": "OPENAI_API_KEY", "required": true },
      { "key": "PERPLEXITY_API_KEY", "required": true },
      { "key": "COINGECKO_PRO_API_KEY", "required": true }
    ],
    "tags": ["MCP"]
  },
  {
    "id": "demap-defillama",
    "name": "DeMCP Defillama",
    "description": "A DeFiLlama MCP server deployed on Phala Cloud that enables AI agents to fetch real-time DeFi data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/demap-defilama",
    "author": "DeMCP",
    "icon": "mcp-defillama.svg",
    "envs": [{ "key": "BEARER_TOKEN", "required": true }],
    "tags": ["MCP"]
  },
  {
    "id": "near-mcp",
    "name": "Near MCP",
    "description": "A Near MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Near data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/near-mcp-server",
    "author": "Phala-Network",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "NEAR_KEYSTOREDATA", "required": true },
      { "key": "NEAR_NETWORK", "required": false },
      { "key": "NEAR_ACCOUNT_ID", "required": true }
    ],
    "icon": "mcp-near.svg",
    "tags": ["MCP"]
  },
  {
    "id": "solana-mcp",
    "name": "Solana MCP",
    "description": "A Solana MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Solana data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/solana-mcp",
    "author": "SendAI & DARK",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "SOLANA_PRIVATE_KEY", "required": true },
      { "key": "RPC_URL", "required": true },
      { "key": "OPENAI_API_KEY", "required": true }
    ],
    "icon": "mcp-solana.svg",
    "tags": ["MCP"]
  },
  {
    "id": "context7-mcp",
    "name": "Context7 MCP",
    "description": "A Context7 MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Context7 data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/context7-mcp",
    "author": "Phala-Network",
    "icon": "mcp-context7.png",
    "envs": [{ "key": "BEARER_TOKEN", "required": true }],
    "tags": ["MCP"]
  },
  {
    "id": "elevenlabs-mcp",
    "name": "ElevenLabs MCP",
    "description": "An ElevenLabs MCP server deployed on Phala Cloud that enables AI agents to fetch real-time ElevenLabs data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/elevenlabs-mcp-server",
    "author": "Phala-Network",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "ELEVENLABS_API_KEY", "required": true },
      { "key": "ELEVENLABS_MCP_BASE_PATH", "required": true }
    ],
    "icon": "elevenlabs.png",
    "tags": ["MCP"]
  },
  {
    "id": "supabase-db",
    "name": "Supabase DB",
    "description": "A Supabase DB MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Supabase DB data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/supabase-db",
    "author": "Phala-Network",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "SUPABASE_ACCESS_TOKEN", "required": true }
    ],
    "icon": "supabase.svg",
    "tags": ["MCP"]
  },
  {
    "id": "figma-mcp",
    "name": "Figma MCP",
    "description": "A Figma MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Figma data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/figma-mcp",
    "author": "Phala-Network",
    "envs": [
      { "key": "BEARER_TOKEN", "required": true },
      { "key": "FIGMA_API_KEY", "required": true }
    ],
    "icon": "mcp-figma.svg",
    "tags": ["MCP"]
  },
  {
    "id": "mcp-server-fetch",
    "name": "MCP Server Fetch",
    "description": "A MCP server deployed on Phala Cloud that enables AI agents to fetch real-time data from a given URL.",
    "repo": "https://github.com/Leechael/mcp-servers/tree/main/src/fetch",
    "author": "Leechael",
    "tags": ["MCP"]
  },
  {
    "id": "mcp-server-sequential-thinking",
    "name": "MCP Server Sequential Thinking",
    "description": "A MCP server deployed on Phala Cloud that enables AI agents to think sequentially.",
    "repo": "https://github.com/Leechael/mcp-servers/tree/main/src/sequentialthinking",
    "author": "Leechael",
    "tags": ["MCP"]
  },
  {
    "id": "mcp-swarms-agent",
    "name": "Swarms Agent in Phala TEE",
    "description": "A Swarms agent deployed on Phala Cloud that perform a comprehensive legal team swarm for contract creation and management",
    "repo": "https://github.com/The-Swarm-Corporation/Phala-Deployment-Template",
    "author": "The-Swarm-Corporation",
    "icon": "mcp-swarms.svg",
    "tags": ["MCP"]
  },
  {
    "id": "tor-hidden-service",
    "name": "TEE Tor Hidden Service",
    "description": "This docker compose example sets up a Tor hidden service and serves an nginx website from that.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/tor-hidden-service",
    "author": "Dstack-TEE",
    "tags": ["Dstack"]
  },
  {
    "id": "lightclient",
    "name": "TEE Coprocessors in Dstack",
    "description": "Minimal docker file for using the Helios light client to provide a trustworthy view of the blockchain.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/lightclient",
    "author": "Dstack-TEE",
    "envs": [{ "key": "ETH_RPC_URL", "required": true }],
    "tags": ["Dstack"]
  },
  {
    "id": "webshell",
    "name": "Webshell",
    "description": "This guide outlines the steps to set up and use a webshell with the ttyd service.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/webshell",
    "author": "Dstack-TEE",
    "tags": ["Dstack"]
  },
  {
    "id": "nextjs-starter",
    "name": "Next.js Starter",
    "description": "This is a template for developing a Next.js-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-nextjs-starter",
    "author": "Phala-Network",
    "icon": "nextjs-starter.svg",
    "tags": ["Starter"]
  },
  {
    "id": "python-starter",
    "name": "Python Starter",
    "description": "This is a template for developing a FastAPI-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-python-starter",
    "author": "Phala-Network",
    "icon": "python-starter.png",
    "tags": ["Starter"]
  },
  {
    "id": "bun-starter",
    "name": "Bun + TypeScript Starter",
    "description": "This is a template for developing a Bun-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-bun-starter",
    "author": "Phala-Network",
    "icon": "bun-starter.svg",
    "tags": ["Starter"]
  },
  {
    "id": "node-starter",
    "name": "Node.js + Express + TypeScript Starter",
    "description": "This is a template for developing a Node.js (Typescript) w/ Express app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Gldywn/phala-cloud-node-starter",
    "author": "Gldywn",
    "icon": "node-starter.svg",
    "tags": ["Starter"]
  },
  {
    "id": "armor-crypto",
    "name": "Armor Crypto",
    "description": "A single source for integrating AI Agents with the Crypto ecosystem. This includes Wallet creation and management, swaps, transfers, event-based trades like DCA, stop loss and take profit, and much more. The Armor MCP supports Solana in Alpha and, when in beta, will support more than a dozen blockchains, including Ethereum. Base, Avalanche, Bitcoin, Sui, Berachain, megaETH, Optimism, Ton, BNB, and Arbitrum, among others. Using Armor's MCP you can bring all of crypto into your AI Agent with unified logic and a complete set of tools.",
    "repo": "https://github.com/HashWarlock/armor-crypto-mcp/tree/phala-mcp",
    "author": "Armor Crypto",
    "icon": "armor-crypto.png",
    "tags": ["MCP"]
  },
  {
    "id": "coinbase-x402-tee",
    "name": "Coinbase x402 TEE",
    "description": "A demonstration of a Node.js Express server that integrates TEE and the [X402 payment protocol](https://www.x402.org/) for monetizing API endpoints.",
    "repo": "https://github.com/HashWarlock/402-api-test/tree/phala-cloud",
    "author": "Phala-Network",
    "icon": "coinbase-x402.png",
    "envs": [
      {
        "key": "WALLET_ADDRESS",
        "required": true
      },
      {
        "key": "OPENAI_API_KEY",
        "required": true
      },
      {
        "key": "DSTACK_SECRET_SALT",
        "required": true
      }
    ],
    "tags": ["Starter", "x402"]
  },
  {
    "id": "vrf",
    "name": "VRF in TEE",
    "description": "This is a template for developing a VRF generator on Phala Cloud and DStack. It delivers cryptographically verifiable randomness for Web3 applications with hardware-backed security and unprecedented efficiency.",
    "repo": "https://github.com/Phala-Network/phala-cloud-vrf-template",
    "author": "Phala-Network",
    "icon": "vrf.png",
    "envs": [
      { "key": "RPC_URL", "required": true },
      { "key": "CONTRACT_ADDRESS", "required": true }
    ],
    "tags": ["VRF"]
  },
  {
    "id": "blinko",
    "name": "Blinko",
    "description": "Blinko is an innovative privacy-focused open-source notebook designed for individuals who want to securely capture and organize their fleeting thoughts. Built with privacy at its core, Blinko can integrate with **Phala Network's secure computation framework** to ensure your ideas and notes remain confidential and protected. Whether you're brainstorming sensitive projects or personal musings, Blinko allows you to seamlessly jot down ideas the moment they strike, with the peace of mind that your data stays private and secure.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/blinko",
    "author": "Blinko Space",
    "icon": "blinko.png",
    "envs": [
      { "key": "NEXTAUTH_SECRET", "required": true },
      { "key": "POSTGRES_PASSWORD", "required": true }
    ],
    "tags": ["Notebook"]
  },
  {
    "id": "chatnio",
    "name": "Chatnio",
    "description": "Chatnio is a powerful AI service management platform supporting 70+ models across text, image, audio, and video. It offers flexible deployment options with comprehensive model management, multi-tenant support, and robust security controls. The platform enables efficient deployment and management of AI services at scale through an intuitive interface and powerful API.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/chatnio",
    "author": "coaidev",
    "icon": "chatnio.png",
    "envs": [
      { "key": "MYSQL_ROOT_PASSWORD", "required": true },
      { "key": "MYSQL_PASSWORD", "required": true }
    ],
    "tags": ["Chat"]
  },
  {
    "id": "n8n-automation",
    "name": "n8n Workflow Automation",
    "description": "Deploy n8n workflow automation platform on Phala Cloud's secure TEE infrastructure. Connect 400+ services, automate business processes, and create complex workflows with a visual interface. Features secure OAuth integration, encrypted credential storage, and confidential workflow execution.",
    "repo": "https://github.com/Marvin-Cypher/phala-n8n-template",
    "author": "Marvin-Cypher",
    "icon": "n8n.png",
    "envs": [
      { "key": "N8N_USER", "required": true },
      { "key": "N8N_PASSWORD", "required": true },
      { "key": "N8N_ENCRYPTION_KEY", "required": false },
      { "key": "OPENAI_API_KEY", "required": false },
      { "key": "GOOGLE_OAUTH_CLIENT_ID", "required": false },
      { "key": "GOOGLE_OAUTH_CLIENT_SECRET", "required": false }
    ],
    "tags": ["Automation", "Workflow", "Integration"]
  },
  {
    "id": "moralis-mcp",
    "name": "Moralis MCP",
    "description": "A Moralis MCP server deployed on Phala Cloud is an engine that connects natural language prompts to real blockchain insights — allowing AI models to query wallet activity, token metrics, dapp usage, and more without custom code or SQL.",
    "repo": "https://github.com/HashWarlock/moralis-mcp-server",
    "author": "HashWarlock",
    "icon": "moralis.png",
    "envs": [
      {
        "key": "BEARER_TOKEN",
        "required": true
      },
      {
        "key": "MORALIS_API_KEY",
        "required": true
      }
    ],
    "tags": [
      "MCP"
    ]
  },
  {
    "id": "zep-graphiti-mcp",
    "name": "Zep Graphiti MCP",
    "description": "A Zep Graphiti MCP server deployed on Phala Cloud to build private Real-Time Knowledge Graphs for AI Agents.",
    "repo": "https://github.com/HashWarlock/graphiti/tree/main/mcp_server",
    "author": "HashWarlock",
    "icon": "zep.png",
    "envs": [
      { "key": "OPENAI_API_KEY", "required": true },
      { "key": "MODEL_NAME", "required": true },
      { "key": "NEO4J_URI", "required": false },
      { "key": "NEO4J_USER", "required": false },
      { "key": "NEO4J_PASSWORD", "required": false }
    ],
    "tags": ["MCP", "Knowledge Graph"]
  },
  {
    "id": "msft-presidio-app",
    "name": "MSFT Presidio App",
    "description": "A MSFT Presidio App deployed on Phala Cloud. Presidio (Origin from Latin praesidium ‘protection, garrison’) helps to ensure sensitive data is properly managed and governed. It provides fast identification and anonymization modules for private entities in text and images such as credit card numbers, names, locations, social security numbers, bitcoin wallets, US phone numbers, financial data and more.",
    "repo": "https://github.com/HashWarlock/presidio/tree/phala-cloud/docs/samples/python/streamlit",
    "author": "HashWarlock",
    "icon": "msft-presidio.png",
    "tags": ["De-Identification"]
  },
  {
    "id": "near-shade-agent",
    "name": "NEAR Shade Agent",
    "description": "Deploy verifiable blockchain agents and oracles on NEAR Protocol using Phala Cloud's TEE infrastructure. Includes ETH price oracle example and framework for custom agent development.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/near-shade-agent",
    "author": "HashWarlock",
    "icon": "mcp-near.svg",
    "envs": [
      { 
        "key": "NEAR_ACCOUNT_ID", 
        "required": true, 
        "description": "NEAR account ID obtained from near-cli-rs" 
      },
      { 
        "key": "NEAR_SEED_PHRASE", 
        "required": true, 
        "description": "NEAR account seed phrase for authentication" 
      },
      { 
        "key": "NEXT_PUBLIC_contractId", 
        "required": true, 
        "description": "Contract ID (ac-proxy.[NEAR_ACCOUNT_ID] for local, ac-sandbox.[NEAR_ACCOUNT_ID] for Phala Cloud)", 
        "default": "ac-proxy.NEAR_ACCOUNT_ID" 
      },
      { 
        "key": "API_CODEHASH", 
        "required": true, 
        "description": "Shade agent API code hash (do not change)", 
        "default": "a86e3a4300b069c08d629a38d61a3d780f7992eaf36aa505e4527e466553e2e5" 
      },
      { 
        "key": "APP_CODEHASH", 
        "required": true, 
        "description": "Your app's code hash (updates automatically with shade-agent-cli)", 
        "default": "af0c4432864489eb8c6650a6dc61f03ef831240a4199e602cd4d6bd8f4d7163f" 
      },
      { 
        "key": "DOCKER_TAG", 
        "required": true, 
        "description": "Docker tag in format docker_username/image_name", 
        "default": "pivortex/my-app" 
      },
      { 
        "key": "PHALA_API_KEY", 
        "required": true, 
        "description": "Phala API key from https://cloud.phala.network/dashboard/tokens" 
      }
    ],
    "tags": ["Agent", "NEAR", "Oracle", "TEE"]
  },
  {
    "id": "bytebot",
    "name": "ByteBot AI Desktop Agent",
    "description": "Deploy ByteBot, an open-source AI desktop agent, on Phala Cloud's secure TEE infrastructure. ByteBot can control a computer desktop to complete tasks for you, running in Docker containers on your own infrastructure. Simply describe what you need done in plain English, and ByteBot will figure out how to do it – clicking buttons, typing text, navigating websites, reading documents, and completing tasks just like a human would.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/bytebot",
    "author": "ByteBot AI",
    "icon": "bytebot.svg",
    "envs": [
      {
        "key": "ANTHROPIC_API_KEY",
        "required": false,
        "description": "Anthropic Claude API key for AI task planning and execution (at least one API key required)"
      },
      {
        "key": "OPENAI_API_KEY",
        "required": false,
        "description": "OpenAI GPT API key for AI task planning and execution (at least one API key required)"
      },
      {
        "key": "GEMINI_API_KEY",
        "required": false,
        "description": "Google Gemini API key for AI task planning and execution (at least one API key required)"
      }
    ],
    "tags": ["AI", "Automation"]
  },
  {
    "id": "node-oracle-template",
    "name": "Node.js Oracle Template",
    "description": "A template for building high-integrity oracles that provides a two-fold guarantee: verifiable computation and verifiable networking. It includes a price aggregator example that demonstrates how to securely fetch, aggregate, and attest to external data, making it a robust foundation for any oracle use case.",
    "repo": "https://github.com/Gldywn/phala-cloud-oracle-template",
    "author": "Gldywn",
    "icon": "hha.png",
    "tags": ["Oracle", "Node"]
  },
  {
    "id": "akave-link",
    "name": "Akave Link (Confidential Storage API)",
    "description": "A production-ready Akave decentralized storage API with interactive UI, password-gated access (optional), and wallet connect/disconnect, running in Phala Cloud's TEE.",
    "repo": "https://github.com/DylanCkawalec/akavelink",
    "author": "DylanCkawalec",
    "icon": "akave-link.png",
    "envs": [
      { "key": "NODE_ADDRESS", "required": true, "default": "connect.akave.ai:5500", "description": "Akave node endpoint" },
      { "key": "PRIVATE_KEY", "required": true, "description": "Ethereum private key for Akave" },
      { "key": "ADMIN_PASSWORD_HASH", "required": false, "description": "bcrypt hash for API password (protects all routes)" },
      { "key": "PORT", "required": false, "default": "80" },
      { "key": "CORS_ORIGIN", "required": false, "default": "*" },
      { "key": "DEBUG", "required": false, "default": "true" }
    ],
    "defaultResource": { "vCPU": 2, "memory": 2048, "diskSize": 20 },
    "tags": ["Storage", "Akave", "REST", "TEE"]
  },
  {
    "id": "open-webui",
    "name": "Open WebUI",
    "description": "A production-ready Open WebUI, an extensible, feature-rich, and user-friendly self-hosted AI platform, running in Phala Cloud's TEE.",
    "repo": "https://github.com/Phala-Network/phala-cloud/tree/main/templates/prebuilt/openwebui",
    "author": "Phala-Network",
    "icon": "open-webui.png",
    "envs": [
      { "key": "WEBUI_SECRET_KEY", "required": false, "description": "Secret key for Open WebUI authentication" }
    ],
    "defaultResource": { "vCPU": 2, "memory": 2048, "diskSize": 20 },
    "tags": ["OpenWebUI", "REST", "TEE"]
  },
  {
    "id": "primus-attestor-node",
    "name": "Primus Attestor Node",
    "description": "An attestor node is a computing node of the Primus network, which forms a secure computation layer for executing zkTLS protocol. The attestor node is designated to run zkTLS tasks with zkTLS software including web version (Primus extension) and mobile versions (Primus AppClips and Primus Instant Apps) on indicated data sources. For security consideration, the attestor node runs inside a Trusted Execution Environment (TEE), ensuring runtime integrity and providing stronger version control.\n\nAny operator of the attestor node is required to stake a certain amount of tokens as collateral to secure his participation in the network activities. The attestor can earn incomes on successfully running the network task. If the zkTLS task is not run correctly, it will also be punished.",
    "repo": "https://github.com/primus-labs/primus-network-startup",
    "author": "PrimusLabs",
    "icon": "primuslabs.svg",
    "envs": [
      { "key": "PRIVATE_KEY", "required": true, "description": "Wallet to report task result." },
      { "key": "BASE_RPC_CHAIN", "required": true, "description": "Rpc for base chain." }
    ],
    "defaultResource": { "vCPU": 4, "memory": 8192, "diskSize": 20 },
    "tags": ["ZKTLS","TEE","PrimusLabs"]
  }
]
